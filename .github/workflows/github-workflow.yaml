name: CI/CD with Ollama Cache
on:
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  pull-requests: write

env:
  OLLAMA_MODELS_DIR: ~/.ollama/models
  OLLAMA_VERSION: 0.1.27

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Cache Ollama Binary
        id: cache-ollama-binary
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/ollama
            /usr/local/bin/ollama
          key: ${{ runner.os }}-ollama-${{ env.OLLAMA_VERSION }}

      - name: Install Ollama
        if: steps.cache-ollama-binary.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y curl wget jq
          mkdir -p ~/.cache/ollama
          OLLAMA_VERSION="v${{ env.OLLAMA_VERSION }}"
          echo "Using Ollama version: $OLLAMA_VERSION"
          DOWNLOAD_URL="https://github.com/ollama/ollama/releases/download/${OLLAMA_VERSION}/ollama-linux-amd64"
          echo "Downloading from: $DOWNLOAD_URL"
          if curl -L -o ollama-linux-amd64 "$DOWNLOAD_URL" && file ollama-linux-amd64 | grep -q "ELF"; then
            echo "Successfully downloaded Ollama binary"
          else
            echo "Failed to download valid Ollama binary"
            exit 1
          fi
          chmod +x ollama-linux-amd64
          sudo mv ollama-linux-amd64 /usr/local/bin/ollama
          if ! ollama --version; then
            echo "Failed to verify Ollama installation"
            exit 1
          fi
          cp /usr/local/bin/ollama ~/.cache/ollama/

      - name: Restore Ollama Binary
        if: steps.cache-ollama-binary.outputs.cache-hit == 'true'
        run: |
          sudo cp ~/.cache/ollama/ollama /usr/local/bin/
          sudo chmod +x /usr/local/bin/ollama
          ollama --version

      - name: Start Ollama Service
        run: |
          mkdir -p ~/.ollama
          ollama serve > ollama.log 2>&1 &
          timeout=30
          while [ $timeout -gt 0 ]; do
            if curl -s http://localhost:11434/api/version > /dev/null; then
              echo "Ollama service is ready"
              cat ollama.log
              break
            fi
            if grep -q "error" ollama.log; then
              echo "Error found in Ollama log:"
              cat ollama.log
              exit 1
            fi
            echo "Waiting for Ollama service to start... ($timeout seconds remaining)"
            sleep 1
            timeout=$((timeout - 1))
          done
          if [ $timeout -le 0 ]; then
            echo "Timeout waiting for Ollama service. Log contents:"
            cat ollama.log
            exit 1
          fi

      - name: Cache Ollama Models
        id: cache-ollama-models
        uses: actions/cache@v4
        with:
          path: ~/.ollama/models
          key: ${{ runner.os }}-ollama-models-${{ hashFiles('models.txt') }}-${{ env.OLLAMA_VERSION }}
          restore-keys: |
            ${{ runner.os }}-ollama-models-

      - name: Check Models File and Current Cache
        id: check-models
        run: |
          mkdir -p ~/.ollama/models
          
          # Debug cache contents
          echo "Cache contents:"
          find ~/.ollama/models -type f -ls
          
          declare -a required_models=()
          if [ -f "models.txt" ]; then
            while IFS= read -r model || [[ -n "$model" ]]; do
              if [[ ! -z "$model" && ! "$model" =~ ^# ]]; then
                required_models+=("$model")
              fi
            done < models.txt
          else
            required_models+=("llama2")
            echo "llama2" > models.txt
          fi
          
          # Check for model files in blobs directory
          declare -a models_to_download=()
          for model in "${required_models[@]}"; do
            if ! find ~/.ollama/models/blobs -type f -exec sha256sum {} \; | grep -q .; then
              models_to_download+=("$model")
            fi
          done
          
          if [ ${#models_to_download[@]} -gt 0 ]; then
            {
              echo "MODELS_TO_DOWNLOAD<<EOF"
              printf "%s\n" "${models_to_download[@]}"
              echo "EOF"
            } >> $GITHUB_ENV
            echo "needs_download=true" >> $GITHUB_OUTPUT
          else
            echo "MODELS_TO_DOWNLOAD=" >> $GITHUB_ENV
            echo "needs_download=false" >> $GITHUB_OUTPUT
          fi

      - name: Download Missing Ollama Models
        if: steps.check-models.outputs.needs_download == 'true'
        run: |
          echo "$MODELS_TO_DOWNLOAD" | while read -r model; do
            [ -z "$model" ] && continue
            echo "Attempting to pull model: $model"
            max_retries=3
            retry_count=0
          
            while [ $retry_count -lt $max_retries ]; do
              if ollama pull "$model"; then
                echo "Successfully pulled model: $model"
                break
              fi
          
              retry_count=$((retry_count + 1))
              if [ $retry_count -eq $max_retries ]; then
                echo "Failed to pull model $model after $max_retries attempts"
                exit 1
              fi
          
              echo "Retry $retry_count pulling model $model..."
              sleep 5
            done
          done

      - name: Debug Ollama Setup
        run: |
          echo "Ollama version: $(ollama --version)"
          echo "Available models: $(ollama list)"
          echo "Ollama service status: $(curl -s http://localhost:11434/api/version || echo 'not responding')"
          echo "Memory usage: $(free -h)"
          echo "Disk space: $(df -h)"

      - name: Fetch PR Changes
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            PR_NUMBER="${{ github.event.pull_request.number }}"
          else
            BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)
            PR_NUMBER=$(gh pr list --head "$BRANCH_NAME" --json number --jq '.[0].number')
          fi
          
          if [ -n "$PR_NUMBER" ]; then
            echo "Found PR number: $PR_NUMBER"
          
            # Get comprehensive PR data including detailed file changes
            PR_DATA=$(gh pr view $PR_NUMBER --json title,body,files,commits,reviews,comments)
          
            # Create a temporary directory for markdown output
            TEMP_DIR=$(mktemp -d)
            OUTPUT_FILE="$TEMP_DIR/pr_${PR_NUMBER}_changes.md"
          
            # Generate markdown content similar to the Python script
            {
              echo "# Pull Request Changes"
              echo "Generated on: $(date '+%Y-%m-%d %H:%M:%S')"
              echo
              echo "## Overview"
              echo "$PR_DATA" | jq -r '"Title: " + .title + "\nDescription: " + .body'
              echo
              echo "## Changed Files"
              echo
          
              # Get detailed changes for each file
              echo "$PR_DATA" | jq -r '.files[] | "### " + .path + "\n" + (
                if .status == "removed" then "🗑️ File deleted\n"
                elif .status == "added" then "✨ New file\n"
                elif .status == "renamed" then "📝 File renamed from: " + (.previous_path // "unknown") + "\n"
                else "📝 File modified\n"
                end
              ) + (
                "Changes:\n" +
                "- Additions: " + (.additions | tostring) + "\n" +
                "- Deletions: " + (.deletions | tostring) + "\n\n" +
                if .patch then
                "```diff\n" + .patch + "\n```\n"
                else "No diff available\n"
                end
              )'
          
              # Get the raw file contents if available
              for file in $(echo "$PR_DATA" | jq -r '.files[].path'); do
                echo "### Full content of $file"
                echo '```'
                if [ -f "$file" ]; then
                  cat "$file"
                else
                  gh pr view $PR_NUMBER --json files --jq ".files[] | select(.path == \"$file\") | .content" 2>/dev/null || echo "Content not available"
                fi
                echo '```'
                echo
              done
          
            } > "$OUTPUT_FILE"
          
            # Store the formatted content for the review step
            echo "=== PR Changes ==="
            cat "$OUTPUT_FILE"
            echo "=================="
          
            # Store for later use
            echo "PR_CONTENT<<EOF" >> $GITHUB_ENV
            cat "$OUTPUT_FILE" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          else
            echo "No PR found, using direct diff..."
            echo "=== Direct Changes ==="
            git diff HEAD^1 HEAD
            echo "===================="
          
            echo "PR_CONTENT<<EOF" >> $GITHUB_ENV
            git diff HEAD^1 HEAD >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          fi
          
            # Store the formatted content for the review step
            echo "=== PR Changes ==="
            cat "$OUTPUT_FILE"
            echo "=================="
          
            # Store for later use
            echo "PR_CONTENT<<EOF" >> $GITHUB_ENV
            cat "$OUTPUT_FILE" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          else
            echo "No PR found, using direct diff..."
            echo "=== Direct Changes ==="
            git diff HEAD^1 HEAD
            echo "===================="
          
            echo "PR_CONTENT<<EOF" >> $GITHUB_ENV
            git diff HEAD^1 HEAD >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          fi

      - name: Review PR with Ollama
        id: ai-review
        run: |
          if [ -z "${{ env.PR_CONTENT }}" ]; then
            echo "Error: No PR content found to review"
            echo "REVIEW_TEXT=Error: No content found to review" >> $GITHUB_ENV
            exit 1
          fi
          
          # Read the prompt template
          PROMPT_TEMPLATE=$(cat .github/workflows/codereviewprompt.txt)
          
          # Replace placeholder with actual PR content
          PROMPT="${PROMPT_TEMPLATE/\{\{PR_CONTENT\}\}/${{ env.PR_CONTENT }}}"
          
          REVIEW_OUTPUT=$(curl -s -X POST http://localhost:11434/api/generate \
            -H 'Content-Type: application/json' \
            -d "{
              \"model\": \"llama2\",
              \"prompt\": $(echo "$PROMPT" | jq -Rs .),
              \"stream\": false
            }" | jq -r '.response' | sed 's/\*\s*$//')
          
          # Format the output to remove trailing asterisks and extra newlines
          FORMATTED_OUTPUT=$(echo "$REVIEW_OUTPUT" | sed '/^[[:space:]]*$/d' | sed 's/\*/•/g')
          
          echo "REVIEW_TEXT<<EOF" >> $GITHUB_ENV
          echo "$FORMATTED_OUTPUT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Post AI Review to PR
        if: github.event_name == 'pull_request'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "## 🤖 AI Code Review

          ${{ env.REVIEW_TEXT }}
          
          ---
          *This review was automatically generated by Ollama using the llama2 model*" > comment.md
          
          gh pr comment "${{ github.event.pull_request.number }}" --body-file comment.md

      - name: Build and Test
        run: echo "Building with cached Ollama models..."

      - name: Prepare Artifacts
        if: failure()
        run: |
          mkdir -p /tmp/ollama-artifacts/models
          mkdir -p /tmp/ollama-artifacts/logs
          cp -r ~/.ollama/models/* /tmp/ollama-artifacts/models/ || true
          cp ollama.log /tmp/ollama-artifacts/logs/ || true
          find /tmp/ollama-artifacts -type f -name "*:*" -exec bash -c 'mv "$1" "${1//:/\_}"' _ {} \;

      - name: Upload Cleaned Artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ollama-artifacts
          path: /tmp/ollama-artifacts
          retention-days: 1

      - name: Cleanup
        if: always()
        run: |
          pkill ollama || true
          sleep 2