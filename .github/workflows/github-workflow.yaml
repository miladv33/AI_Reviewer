name: CI/CD with Ollama Cache
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  OLLAMA_MODELS_DIR: ~/.ollama/models
  OLLAMA_VERSION: 0.1.27  # Specify the version you want to use

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    # Cache Ollama binary
    - name: Cache Ollama Binary
      id: cache-ollama-binary
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/ollama
          /usr/local/bin/ollama
        key: ${{ runner.os }}-ollama-${{ env.OLLAMA_VERSION }}

    # Install Ollama only if not cached
    - name: Install Ollama
      if: steps.cache-ollama-binary.outputs.cache-hit != 'true'
      run: |
        mkdir -p ~/.cache/ollama
        # Download the latest release directly from GitHub
        LATEST_RELEASE=$(curl -s https://api.github.com/repos/ollama/ollama/releases/latest | grep "tag_name" | cut -d '"' -f 4)
        echo "Installing Ollama version: $LATEST_RELEASE"
        wget -q https://github.com/ollama/ollama/releases/download/${LATEST_RELEASE}/ollama-linux-amd64
        chmod +x ollama-linux-amd64
        sudo mv ollama-linux-amd64 /usr/local/bin/ollama
        # Copy the binary to cache location
        cp /usr/local/bin/ollama ~/.cache/ollama/

    # Restore Ollama binary if it was cached
    - name: Restore Ollama Binary
      if: steps.cache-ollama-binary.outputs.cache-hit == 'true'
      run: |
        sudo cp ~/.cache/ollama/ollama /usr/local/bin/
        sudo chmod +x /usr/local/bin/ollama
        ollama --version

    # Start Ollama service
    - name: Start Ollama Service
      run: |
        ollama serve &
        timeout=30
        while ! curl -s http://localhost:11434/api/version > /dev/null; do
          if [ $timeout -le 0 ]; then
            echo "Timeout waiting for Ollama service"
            exit 1
          fi
          echo "Waiting for Ollama service to start... ($timeout seconds remaining)"
          sleep 1
          timeout=$((timeout - 1))
        done
        echo "Ollama service is ready"

    # Cache Ollama models with SHA of models.txt
    - name: Cache Ollama Models
      id: cache-ollama-models
      uses: actions/cache@v4
      with:
        path: ~/.ollama/models
        key: ${{ runner.os }}-ollama-models-${{ hashFiles('models.txt') }}-${{ env.OLLAMA_VERSION }}
        restore-keys: |
          ${{ runner.os }}-ollama-models-

    # Check if models.txt exists
    - name: Check Models File
      id: check-models
      run: |
        if [ -f "models.txt" ]; then
          echo "models_exist=true" >> $GITHUB_OUTPUT
        else
          echo "Warning: models.txt not found. Creating with default model..."
          echo "llama2" > models.txt
          echo "models_exist=true" >> $GITHUB_OUTPUT
        fi

    # Download models if not cached
    - name: Download Ollama Models
      if: steps.cache-ollama-models.outputs.cache-hit != 'true' && steps.check-models.outputs.models_exist == 'true'
      run: |
        mkdir -p ~/.ollama/models
        while IFS= read -r model || [[ -n "$model" ]]; do
          if [[ ! -z "$model" && ! "$model" =~ ^# ]]; then
            echo "Pulling model: $model"
            for i in {1..3}; do
              if ollama pull "$model"; then
                break
              fi
              if [ $i -eq 3 ]; then
                echo "Failed to pull model $model after 3 attempts"
                exit 1
              fi
              echo "Retry $i pulling model $model..."
              sleep 5
            done
          fi
        done < models.txt

    # Verify models are available
    - name: Verify Models
      run: |
        ls -la ~/.ollama/models/
        while IFS= read -r model || [[ -n "$model" ]]; do
          if [[ ! -z "$model" && ! "$model" =~ ^# ]]; then
            echo "Verifying model: $model"
            ollama list | grep "$model" || exit 1
          fi
        done < models.txt

    # Your build steps here
    - name: Build and Test
      run: |
        echo "Building with cached Ollama models..."

    # Optional: Upload models as artifacts for debugging
    - name: Upload Models Directory
      if: failure()  # Only upload on failure for debugging
      uses: actions/upload-artifact@v4
      with:
        name: ollama-models
        path: ~/.ollama/models/
        retention-days: 1

    # Cleanup
    - name: Cleanup
      if: always()
      run: |
        pkill ollama || true
        sleep 2