name: CI/CD with Ollama Cache
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  OLLAMA_MODELS_DIR: ~/.ollama/models
  OLLAMA_VERSION: 0.1.27

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    # Cache Ollama binary
    - name: Cache Ollama Binary
      id: cache-ollama-binary
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/ollama
          /usr/local/bin/ollama
        key: ${{ runner.os }}-ollama-${{ env.OLLAMA_VERSION }}

    # Install Ollama only if not cached
    - name: Install Ollama
      if: steps.cache-ollama-binary.outputs.cache-hit != 'true'
      run: |
        # Install required dependencies
        sudo apt-get update
        sudo apt-get install -y curl wget jq
        
        # Create cache directory
        mkdir -p ~/.cache/ollama
        
        # Set Ollama version (using a known working version)
        OLLAMA_VERSION="v0.1.27"
        echo "Using Ollama version: $OLLAMA_VERSION"
        
        # Download binary with verification
        DOWNLOAD_URL="https://github.com/ollama/ollama/releases/download/${OLLAMA_VERSION}/ollama-linux-amd64"
        echo "Downloading from: $DOWNLOAD_URL"
        
        # Download with curl and verify it's a binary
        if curl -L -o ollama-linux-amd64 "$DOWNLOAD_URL" && file ollama-linux-amd64 | grep -q "ELF"; then
          echo "Successfully downloaded Ollama binary"
        else
          echo "Failed to download valid Ollama binary"
          exit 1
        fi
        
        # Make executable and install
        chmod +x ollama-linux-amd64
        sudo mv ollama-linux-amd64 /usr/local/bin/ollama
        
        # Verify installation
        if ! ollama --version; then
          echo "Failed to verify Ollama installation"
          exit 1
        fi
        
        # Copy to cache
        cp /usr/local/bin/ollama ~/.cache/ollama/

    # Restore Ollama binary if it was cached
    - name: Restore Ollama Binary
      if: steps.cache-ollama-binary.outputs.cache-hit == 'true'
      run: |
        sudo cp ~/.cache/ollama/ollama /usr/local/bin/
        sudo chmod +x /usr/local/bin/ollama
        ollama --version

    # Start Ollama service with better error handling
    - name: Start Ollama Service
      run: |
        # Create required directories
        mkdir -p ~/.ollama
        
        # Start ollama with logging
        ollama serve > ollama.log 2>&1 &
        
        # Wait for the service with better error checking
        timeout=30
        while [ $timeout -gt 0 ]; do
          if curl -s http://localhost:11434/api/version > /dev/null; then
            echo "Ollama service is ready"
            cat ollama.log
            break
          fi
          
          # Check for errors in log
          if grep -q "error" ollama.log; then
            echo "Error found in Ollama log:"
            cat ollama.log
            exit 1
          fi
          
          echo "Waiting for Ollama service to start... ($timeout seconds remaining)"
          sleep 1
          timeout=$((timeout - 1))
        done
        
        if [ $timeout -le 0 ]; then
          echo "Timeout waiting for Ollama service. Log contents:"
          cat ollama.log
          exit 1
        fi

    # Cache Ollama models
    - name: Cache Ollama Models
      id: cache-ollama-models
      uses: actions/cache@v4
      with:
        path: ~/.ollama/models
        key: ${{ runner.os }}-ollama-models-${{ hashFiles('models.txt') }}-${{ env.OLLAMA_VERSION }}
        restore-keys: |
          ${{ runner.os }}-ollama-models-

    # Check if models.txt exists
    - name: Check Models File
      id: check-models
      run: |
        if [ -f "models.txt" ]; then
          echo "models_exist=true" >> $GITHUB_OUTPUT
        else
          echo "Warning: models.txt not found. Creating with default model..."
          echo "llama2" > models.txt
          echo "models_exist=true" >> $GITHUB_OUTPUT
        fi

    # Download models if not cached
    - name: Download Ollama Models
      if: steps.cache-ollama-models.outputs.cache-hit != 'true' && steps.check-models.outputs.models_exist == 'true'
      run: |
        mkdir -p ~/.ollama/models
        while IFS= read -r model || [[ -n "$model" ]]; do
          if [[ ! -z "$model" && ! "$model" =~ ^# ]]; then
            echo "Pulling model: $model"
            for i in {1..3}; do
              if ollama pull "$model"; then
                break
              fi
              if [ $i -eq 3 ]; then
                echo "Failed to pull model $model after 3 attempts"
                exit 1
              fi
              echo "Retry $i pulling model $model..."
              sleep 5
            done
          fi
        done < models.txt

    # Fetch PR changes
    - name: Fetch PR Changes
      if: github.event_name == 'pull_request'
      env:
        GH_TOKEN: ${{ secrets.PRIVATE_KEY }}
      run: |
        # Get PR number
        PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
        
        # Fetch PR changes including deletions and additions
        PR_CHANGES=$(gh api repos/${{ github.repository }}/pulls/$PR_NUMBER \
          --jq '.diff_url' | xargs curl -s)
        
        # Store changes in environment variable for later use
        echo "PR_DIFF<<EOF" >> $GITHUB_ENV
        echo "$PR_CHANGES" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        
        # Print changes for verification
        echo "Retrieved PR changes:"
        echo "$PR_CHANGES"

    - name: Test Ollama Hello
      run: |
        echo "Ollama response:"
        curl -s -X POST http://localhost:11434/api/generate -d '{
          "model": "llama2",
          "prompt": "Say hello!"
        }' | while read -r line; do
          if echo "$line" | grep -q "response"; then
            echo "$line" | jq -r .response | tr -d '\n'
          fi
        done
        echo

    # Your build steps here
    - name: Build and Test
      run: |
        echo "Building with cached Ollama models..."

    # Upload models directory for debugging
    - name: Upload Models Directory
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: ollama-models
        path: |
          ~/.ollama/models/
          ollama.log
        retention-days: 1


    # Cleanup
    - name: Cleanup
      if: always()
      run: |
        pkill ollama || true
        sleep 2