name: Ollama DeepSeek Test

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  test-ollama:
    runs-on: ubuntu-latest
    outputs:
      model_response: ${{ steps.run-model.outputs.response }}
      ai_review_output: ${{ steps.run-model.outputs.formatted_output }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get PR changes
        id: pr-diff
        run: |
          echo "=== Getting PR Changes ==="

          echo "Getting changed files..."
          echo "Changed files:" > pr_changes.txt
          git diff --name-status ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | tee -a pr_changes.txt

          echo -e "\nGetting detailed changes..."
          echo -e "\nDetailed changes:" >> pr_changes.txt
          git diff ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | tee -a pr_changes.txt

          echo -e "\n=== Full PR Changes Content ==="
          cat pr_changes.txt

          # Store in environment variable
          {
            echo 'PR_CHANGES<<EOF'
            cat pr_changes.txt
            echo 'EOF'
          } >> $GITHUB_ENV

          # Also set as output
          {
            echo "diff_content<<EOF"
            cat pr_changes.txt
            echo "EOF"
          } >> $GITHUB_OUTPUT
        shell: bash

      - name: Install Ollama
        run: |
          curl -fsSL https://ollama.com/install.sh | sh

      - name: Run DeepSeek model
        id: run-model
        run: |
          # Create the prompt with specific request for completion
          PROMPT="Please review the following pull request for any potential issues or improvements. Format your response as a structured review with clear sections for: 1) Code Quality, 2) Performance, 3) Security, 4) Documentation, and 5) Testing. End your response with a clear 'END OF REVIEW' marker."
          
          # Run the model and capture complete response
          response=$(echo "$PROMPT" | ollama run deepseek-r1:1.5b 2>/dev/null | 
            grep -v '^[0-9]' | 
            grep -v '25[hl]' | 
            grep -v '⠙\|⠸\|⠴\|⠦\|⠧\|⠇\|⠏\|⠋\|⠙\|⠹\|⠼' | 
            sed '/^$/d' |
            tr '\n' '\r' | 
            sed 's/\r/\\n/g')
          
          # Create formatted output with headers and separators
          formatted_output="::group::Model Response\\n"
          formatted_output+="Sending code review request to DeepSeek model...\\n"
          formatted_output+="----------------------------------------\\n"
          formatted_output+="Model response:\\n"
          formatted_output+="----------------------------------------\\n"
          formatted_output+="$(echo -e "$response" | sed 's/^/> /')\\n"
          formatted_output+="----------------------------------------\\n"
          formatted_output+="::endgroup::"
          
          # Store both raw response and formatted output in GITHUB_OUTPUT
          {
            echo "response<<EOF"
            echo -e "$response"
            echo "EOF"
          } >> $GITHUB_OUTPUT
          
          {
            echo "formatted_output<<EOF"
            echo -e "$formatted_output"
            echo "EOF"
          } >> $GITHUB_OUTPUT
          
          # Display the formatted output
          echo -e "$formatted_output"
          
          # Set model response as environment variable for the next step
          echo "MODEL_RESPONSE=$response" >> $GITHUB_ENV

      - name: Comment PR with AI Review
        id: pr-comment
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Creating PR comment..."
          
          # Escape newlines and quotes in the response
          ESCAPED_RESPONSE=$(echo "$MODEL_RESPONSE" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed ':a;N;$!ba;s/\n/\\n/g')
          
          # Create the JSON payload
          PAYLOAD=$(cat <<EOF
          {
            "body": "## 🤖 AI Code Review\n\n${ESCAPED_RESPONSE}\n\n---\n*This review was automatically generated by DeepSeek AI*"
          }
          EOF
          )
          
          PR_NUMBER="${{ github.event.pull_request.number }}"
          REPO_FULL_NAME="${{ github.repository }}"
          
          echo "Posting comment to PR #$PR_NUMBER"
          echo "Using repo: $REPO_FULL_NAME"
          
          # Make the API request with verbose output
          RESPONSE=$(curl -v -X POST \
            -H "Authorization: Bearer $GH_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Content-Type: application/json" \
            "https://api.github.com/repos/$REPO_FULL_NAME/issues/$PR_NUMBER/comments" \
            -d "$PAYLOAD")
          
          # Print response for debugging
          echo "API Response:"
          echo "$RESPONSE" | jq '.'
          
          # Check if we got an error
          if echo "$RESPONSE" | jq -e '.message' > /dev/null; then
            echo "Error from GitHub API:"
            echo "$RESPONSE" | jq -r '.message'
            exit 1
          fi
          
          # Get comment URL
          COMMENT_URL=$(echo "$RESPONSE" | jq -r '.html_url')
          
          if [ "$COMMENT_URL" = "null" ]; then
            echo "Failed to get comment URL from response"
            exit 1
          fi
          
          echo "Comment posted successfully"
          echo "Comment URL: $COMMENT_URL"
          echo "comment_url=$COMMENT_URL" >> $GITHUB_OUTPUT