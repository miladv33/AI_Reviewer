name: 'DeepSeek PR Review'
description: 'Automatically review pull requests using DeepSeek AI model via Ollama'
author: 'Milad Varvaei'

branding:
  icon: 'eye'
  color: 'blue'

inputs:
  github-token:
    description: 'GitHub token for commenting on PRs'
    required: true
    default: ${{ github.token }}
  custom-prompt:
    description: 'Custom prompt for the AI review'
    required: false
    default: 'Please review the following pull request changes and provide feedback.'
  model:
    description: 'DeepSeek model to use'
    required: false
    default: 'deepseek-r1:14b'

runs:
  using: 'composite'
  steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Get PR changes
      shell: bash
      run: |
        echo "=== Getting PR Changes ==="

        echo "Getting changed files..."
        echo "Changed files:" > pr_changes.txt
        git diff --name-status ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | tee -a pr_changes.txt

        echo -e "\nGetting detailed changes..."
        echo -e "\nDetailed changes:" >> pr_changes.txt
        git diff ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | tee -a pr_changes.txt

        echo -e "\n=== Full PR Changes Content ==="
        cat pr_changes.txt

        {
          echo 'PR_CHANGES<<EOF'
          cat pr_changes.txt
          echo 'EOF'
        } >> $GITHUB_ENV
    - name: Debug PR Content
      shell: bash
      run: |
        echo "=== PR_CHANGES Environment Variable ==="
        echo "$PR_CHANGES"
        echo "=== Content of full_prompt.txt ==="
        cat .github/workflows/full_prompt.txt
        echo "=== End of Debug ==="

    - name: Install Ollama
      shell: bash
      run: |
        curl -fsSL https://ollama.com/install.sh | sh

    - name: Handle Prompt
      shell: bash
      id: handle-prompt
      run: |
        # Check for custom prompt file
        if [ -f ".github/workflows/full_prompt.txt" ]; then
          PROMPT=$(cat .github/workflows/full_prompt.txt)
          echo "Using custom prompt from file"
        else
          PROMPT="${{ inputs.custom-prompt }}"
          echo "Using default prompt"
        fi
        echo "PROMPT=$PROMPT" >> $GITHUB_ENV

    - name: Run DeepSeek model
      shell: bash
      id: run-model
      run: |
        # Combine prompt and changes
        echo "$PROMPT" > full_prompt.txt
        echo -e "\nChanges to review:\n$PR_CHANGES" >> full_prompt.txt

        # Run the model and capture complete response, filtering out thinking process
        response=$(cat full_prompt.txt | ollama run ${{ inputs.model }} 2>/dev/null |
          grep -v '^[0-9]' |
          grep -v '25[hl]' |
          grep -v '⠙\|⠸\|⠴\|⠦\|⠧\|⠇\|⠏\|⠋\|⠙\|⠹\|⠼' |
          # Remove thinking process
          sed '/^<think>/,/^<\/think>/d' |
          # Remove any remaining [] wrapped text at start of lines (common for thinking outputs)
          sed 's/^\[[^]]*\]//g' |
          # Escape special characters
          sed 's/[`"'\'']/\\&/g' |
          # Format headings
          sed 's/^###\([^#]\)/### \1/g' |
          sed 's/^####\([^#]\)/#### \1/g' |
          # Format lists
          sed 's/^-\([^ ]\)/- \1/g' |
          # Format bold text
          sed 's/\*\*\([^*]\+\)\*\*/\*\*\1\*\*/g' |
          # Ensure proper line breaks between sections
          sed '/^#/i\\' |
          # Escape any remaining problematic characters
          sed 's/[${}]/\\&/g' |
          # Clean up any extra whitespace from removals
          sed '/^[[:space:]]*$/d' |
          # Convert to GitHub Actions compatible format
          tr '\n' '\r' |
          sed 's/\r/\\n/g')

        echo "response=$response" >> $GITHUB_OUTPUT

    - name: Comment AI Review on PR
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const modelResponse = process.env.RESPONSE || '';
          const cleanResponse = modelResponse
            .replace(/\\n/g, '\n')
            .replace(/[^\x20-\x7E\n]/g, '') // Remove non-printable characters
            .trim();
            
          const aiReview = [
            '# AI Code Review',
            '',
            cleanResponse,
            '',
            '---',
            '*This review was automatically generated by DeepSeek AI.*'
          ].join('\n');
          
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: aiReview
          });